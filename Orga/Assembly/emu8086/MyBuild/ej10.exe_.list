EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
ej10.exe_ -- emu8086 assembler version: 4.08  
 
[ 5/13/2025  --  9:29:41 PM ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       ;En las direcciones 0100 y 0101 hay dos enteros positivos.
[   2]        :                                       ;Ubicar en la direccion 0102 el menor de los dos.
[   3]        :                                       
[   4]        :                                       .MODEL SMALL
[   5]        :                                       .STACK
[   6]        :                                       .DATA
[   7]        :                                       
[   8]    0100: 12 34                                 valores DB 12h, 34h
[   9]        :                                       
[  10]        :                                       .CODE
[  11]        :                                       
[  12]    0110:                                       MAIN PROC
[  13]    0110: B8 10 00                              mov ax, @data
[  14]    0113: 8E D8                                 mov ds, ax
[  15]        :                                       
[  16]        :                                       ; Cargo los valores de las direcciones
[  17]    0115: A0 64 00                              mov al, [0100]
[  18]    0118: 8A 1E 65 00                           mov bl, [0101]
[  19]        :                                       
[  20]        :                                       
[  21]        :                                       ; Comparo
[  22]    011C: 3A C3                                 cmp al, bl
[  23]    011E: 72 06                                 jb menor_al ; si al < bl, salto a AL
[  24]        :                                       
[  25]        :                                       
[  26]        :                                       ; Si no salta sigo
[  27]    0120: 88 1E 66 00                           mov [0102], bl
[  28]    0124: EB 03                                 jmp fin     ; salto incodicional
[  29]        :                                       
[  30]    0126:                                       menor_al:
[  31]    0126: A2 66 00                              mov [0102], al
[  32]        :                                       
[  33]    0129:                                       fin:
[  34]    0129: B4 4C                                 mov ah, 4Ch
[  35]    012B: CD 21                                 int 21h
[  36]        :                                       MAIN ENDP
[  37]        :                                       END MAIN
[  38]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: 2D      -   bytes on last page (l.byte)
0003: 01      -   bytes on last page (h.byte)
0004: 02      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 01      -   SP - stack pointer (h.byte)
0012: 98      -   check sum (l.byte)
0013: 11      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 11      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 11      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
