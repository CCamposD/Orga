EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
ej21.exe_ -- emu8086 assembler version: 4.08  
 
[ 6/8/2025  --  10:24:53 PM ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       ;21.
[   2]        :                                       ;Una cadena de caracteres ASCII de longitud dada por el dato almacenado
[   3]        :                                       ;en la direccion 201 se inicia en la direccion 202.
[   4]        :                                       ;Almacenar FF en la direccion 200 si la paridad de todos los caracteres es par.
[   5]        :                                       ;En caso contrario almacenar 00.
[   6]        :                                       
[   7]        :                                       
[   8]        :                                       
[   9]        :                                       .model small
[  10]        :                                       .stack
[  11]        :                                       .data
[  12]        :                                       .code
[  13]        :                                       
[  14]    0100:                                       main PROC
[  15]    0100: B8 10 00                              mov ax,@data
[  16]    0103: 8E D8                                 mov ds, ax
[  17]        :                                       
[  18]    0105: 8A 0E 01 02                           mov cl, [0201h] ; cantidad de datos
[  19]    0109: BE 02 02                              mov si, 0202h   ; direc de los datos
[  20]        :                                       
[  21]    010C:                                       verificar:
[  22]    010C: 8A 04                                 mov al, [si]    ; cargo el char actual
[  23]    010E: 8A E0                                 mov ah, al      ; copio para contar bits
[  24]        :                                       
[  25]    0110: 32 DB                                 xor bl, bl      ; contador de 1s
[  26]    0112: B5 08                                 mov ch, 8       ; 8 bits por char
[  27]        :                                       
[  28]    0114:                                       contar_bits:
[  29]    0114: D0 EC                                 shr ah, 1       ; desplazar bit a CF
[  30]    0116: 73 02                                 jnc siguiente_bit
[  31]    0118: FE C3                                 inc bl          ; si CF = 1, sumar 1
[  32]        :                                       
[  33]    011A:                                       siguiente_bit:
[  34]    011A: FE CD                                 dec ch
[  35]    011C: 75 F6                                 jnz contar_bits
[  36]        :                                       
[  37]    011E: F6 C3 01                              test bl, 1      ; es impar?
[  38]    0121: 75 0C                                 jnz paridad_impar
[  39]        :                                       
[  40]    0123: 46                                    inc si          ; siguiente caracter
[  41]    0124: FE C9                                 dec cl
[  42]    0126: 75 E4                                 jnz verificar
[  43]        :                                       
[  44]    0128:                                       paridad_par:
[  45]    0128: C6 06 00 02 FF                        mov byte ptr [0200h], 0FFh
[  46]    012D: EB 05                                 jmp fin
[  47]        :                                       
[  48]    012F:                                       paridad_impar:
[  49]    012F: C6 06 00 02 00                        mov byte ptr [0200h], 00h
[  50]        :                                       
[  51]    0134:                                       fin:
[  52]        :                                       
[  53]    0134: B4 4C                                 mov ah, 4Ch
[  54]    0136: CD 21                                 int 21h
[  55]        :                                       
[  56]        :                                       
[  57]        :                                       main ENDP
[  58]        :                                       END main
[  59]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: 38      -   bytes on last page (l.byte)
0003: 01      -   bytes on last page (h.byte)
0004: 02      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 01      -   SP - stack pointer (h.byte)
0012: FE      -   check sum (l.byte)
0013: F6      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 10      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 10      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
