EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
ej22.exe_ -- emu8086 assembler version: 4.08  
 
[ 6/8/2025  --  10:39:59 PM ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       ; 22.
[   2]        :                                       ; Dos cadenas de caracteres, A y B, de longitudes iguales e igual al dato
[   3]        :                                       ; almacenado en la direccion 201 comienza en las direcciones 202 y 234
[   4]        :                                       ; respectivamente.
[   5]        :                                       ; Si la cadena A es mayor o igual a la cadena B según el
[   6]        :                                       ; orden alfabético, almacenar 0 en la dirección 200.
[   7]        :                                       ; En caso contrario almacenar 1.
[   8]        :                                       
[   9]        :                                       .model small
[  10]        :                                       .stack
[  11]        :                                       .data
[  12]        :                                       .code
[  13]        :                                       
[  14]    0100:                                       main PROC
[  15]    0100: B8 10 00                              mov ax,@data
[  16]    0103: 8E D8                                 mov ds, ax
[  17]        :                                       
[  18]    0105: 8A 0E 01 02                           mov cl, [0201h]   ; longitud de las cadenas
[  19]    0109: BE 02 02                              mov si, 0202h     ; inicio de cadena A
[  20]    010C: BF 34 02                              mov di, 0234h     ; inicio de cadena B
[  21]        :                                       
[  22]    010F:                                       comparar:
[  23]    010F: 8A 04                                 mov al, [si]
[  24]    0111: 8A 25                                 mov ah, [di]
[  25]    0113: 3A C4                                 cmp al, ah
[  26]    0115: 72 0F                                 jb a_es_menor      ; si A < B
[  27]    0117: 77 06                                 ja a_mayor_igual   ; si A > B
[  28]        :                                       
[  29]        :                                       ; caracteres iguales ? avanzar
[  30]    0119: 46                                    inc si
[  31]    011A: 47                                    inc di
[  32]    011B: FE C9                                 dec cl
[  33]    011D: 75 F0                                 jnz comparar       ; mientras queden caracteres
[  34]        :                                       
[  35]        :                                       ; si todas fueron iguales ? A = B
[  36]    011F:                                       a_mayor_igual:
[  37]    011F: C6 06 00 02 00                        mov byte ptr [0200h], 00h
[  38]    0124: EB 05                                 jmp fin
[  39]        :                                       
[  40]    0126:                                       a_es_menor:
[  41]    0126: C6 06 00 02 01                        mov byte ptr [0200h], 01h
[  42]        :                                       
[  43]    012B:                                       fin:
[  44]    012B: B4 4C                                 mov ah, 4Ch
[  45]    012D: CD 21                                 int 21h
[  46]        :                                       
[  47]        :                                       
[  48]        :                                       main ENDP
[  49]        :                                       END main
[  50]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: 2F      -   bytes on last page (l.byte)
0003: 01      -   bytes on last page (h.byte)
0004: 02      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 01      -   SP - stack pointer (h.byte)
0012: 95      -   check sum (l.byte)
0013: 10      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 10      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 10      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
