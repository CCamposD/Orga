EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
ej08_sumar.exe_ -- emu8086 assembler version: 4.08  
 
[ 5/13/2025  --  8:55:00 PM ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       ;CALCULAR LA SUMA DE 3 DATOS
[   2]        :                                       
[   3]        :                                       .MODEL SMALL
[   4]        :                                       .STACK ; asigna un STACK de 1K
[   5]        :                                       
[   6]        :                                       .DATA
[   7]        :                                       
[   8]    0100: 01 02 03 0C                           DATOSSUM DB 01, 02, 03, 12
[   9]        :                                       
[  10]        :                                       
[  11]        :                                       .CODE
[  12]        :                                       
[  13]        :                                       
[  14]    0110: B8 10 00                              mov ax, @DATA     ; Poner en AX la dirección de los datos
[  15]    0113: 8E D8                                 mov ds, ax        ; Cargar en el data segment esa dirección
[  16]    0115: 33 DB                                 xor bx, bx        ; indice de acceso al área de datos
[  17]    0117: 32 D2                                 xor dl, dl        ; acumulador de datos
[  18]    0119: B9 0A 00                              mov cx, 10       ; numero de datos a procesar
[  19]        :                                       
[  20]        :                                       
[  21]        :                                       ;CALCULO DE LA SUMA
[  22]        :                                       
[  23]    011C:                                       ACUMULA:
[  24]    011C: 8A 37                                 mov dh, DATOSSUM [BX]
[  25]    011E: 02 17                                 add dl, DATOSSUM [BX]
[  26]    0120: 43                                    inc bx
[  27]    0121: E2 F9                                 loop ACUMULA
[  28]        :                                       
[  29]        :                                       ;MOSTRAR RESULTADO EN PANTALLA
[  30]        :                                       
[  31]    0123: B8 00 B8                              MOV  AX,0B800h         ; segmento de la memoria de pantalla
[  32]    0126: 8E D8                                 MOV  DS,AX             ; apuntar segmento de datos a la misma
[  33]    0128: BB 00 00                              MOV  BX,0              ; apuntar al primer carácter ASCII de la pantalla
[  34]    012B: B6 90                                 MOV  DH,90h  	        ; fondo azul
[  35]        :                                       ; Para simplificar el print:
[  36]        :                                       ; mov ah,2 o mov ah,02h
[  37]        :                                       ; int 21h
[  38]        :                                       
[  39]        :                                       
[  40]    012D: 8A C2                                 mov al, dl     ; cargo el resultado en al
[  41]    012F: D4 0A                                 aam            ; ah = 1[d] , al 8 [u]
[  42]    0131: 80 C4 30                              add ah, 30h    ; llevo el ascii a su n^
[  43]    0134: 04 30                                 add al, 30h    ; " " " " " " " " " " "
[  44]    0136: 8A D4                                 mov dl, ah     ; muevo para mostar primero el 1
[  45]    0138: 89 17                                 MOV  [bx],dx
[  46]    013A: 83 C3 02                              add  bx, 2
[  47]    013D: 8A D0                                 mov  dl, al    ; muevo para mostrar el 8
[  48]    013F: 89 17                                 MOV  [Bx],dx   ; caracter cargado en DL
[  49]        :                                       
[  50]        :                                       
[  51]        :                                       END
[  52]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: 41      -   bytes on last page (l.byte)
0003: 01      -   bytes on last page (h.byte)
0004: 02      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 01      -   SP - stack pointer (h.byte)
0012: 0E      -   check sum (l.byte)
0013: 77      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 11      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 11      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
