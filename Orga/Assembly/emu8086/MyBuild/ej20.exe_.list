EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
ej20.exe_ -- emu8086 assembler version: 4.08  
 
[ 6/8/2025  --  9:53:41 PM ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       ;El caracter ASCII de control de retorno de carro CR es, en decimal, el 13.
[   2]        :                                       ;Este caracter se encuentra al final de una cadena que comienza en la direccion 202.
[   3]        :                                       ;Ubicar en las posiciones de memoria 200 y 201 la direccion del
[   4]        :                                       ;ultimo caracter antes del CR.
[   5]        :                                       
[   6]        :                                       
[   7]        :                                       .model small
[   8]        :                                       .stack
[   9]        :                                       .data
[  10]        :                                       .code
[  11]        :                                       
[  12]    0100:                                       main PROC
[  13]    0100: B8 10 00                              mov ax,@data
[  14]    0103: 8E D8                                 mov ds, ax
[  15]        :                                       
[  16]    0105: BE 02 02                              mov si, 0202h   ; inicio de la cadena
[  17]    0108: 8B FE                                 mov di, si      ; ultima pos antes del caractrer CR
[  18]        :                                       
[  19]    010A:                                       buscar_cr:
[  20]    010A: 8A 04                                 mov al, [si]    ; veo el caracter
[  21]    010C: 3C 0D                                 cmp al, 0Dh     ; es CR ?
[  22]    010E: 74 05                                 je guardar_direccion
[  23]    0110: 8B FE                                 mov di, si      ; actualizo la ultima pos antes del CR
[  24]    0112: 46                                    inc si
[  25]    0113: EB F5                                 jmp buscar_cr
[  26]        :                                       
[  27]    0115:                                       guardar_direccion:
[  28]    0115: 8B C7                                 mov ax, di
[  29]    0117: A2 00 02                              mov [0200h], al
[  30]    011A: 88 26 01 02                           mov [0201h], ah
[  31]        :                                       
[  32]    011E: B4 4C                                 mov ah, 4Ch
[  33]    0120: CD 21                                 int 21h
[  34]        :                                       
[  35]        :                                       
[  36]        :                                       main ENDP
[  37]        :                                       END main
[  38]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: 22      -   bytes on last page (l.byte)
0003: 01      -   bytes on last page (h.byte)
0004: 02      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 01      -   SP - stack pointer (h.byte)
0012: 40      -   check sum (l.byte)
0013: 52      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 10      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 10      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
